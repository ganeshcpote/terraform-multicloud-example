def access_key=""
def secret_key=""
def data = ""
pipeline {
  agent any

  parameters {
        	string(name: 'app_name', defaultValue: 'test1', description: 'Provide Application name to be deploy') 
		choice(name: 'app_environment', choices: ['dev', 'qa', 'pre-prod', 'prod'], description: 'Specify environment' )
		choice(name: 'aws_region', choices: ['us-east-1', 'us-east-2'], description: 'Specify aws region' )
		choice(name: 'instance_type', choices: ['t2.micro', 't2.medium'], description: 'Specify instance type' )
	  	string(name: 'user_email', defaultValue: 'ganesh.pote@hotmail.com', description: 'Provide user email Id for notification') 
    }
  stages {
   stage('Preparations') {
      steps {
	script {
		withCredentials ([usernamePassword(credentialsId: 'aws_credentails', usernameVariable: 'aws_access_key', passwordVariable: 'aws_secret_key')]) {
		   access_key = aws_access_key
		   secret_key = aws_secret_key
		}
	}
	dir('aws') {
		script {
			data = "aws_access_key=\"${access_key}\"\n"
			data = data + "aws_secret_key=\"${secret_key}\"\n"
			data = data + "app_name=\"${app_name}\"\n"
			data = data + "app_environment=\"${app_environment}\"\n"
			data = data + "aws_region=\"${aws_region}\"\n"
			data = data + "instance_type=\"${instance_type}\"\n"
		}
	writeFile file: "${BUILD_ID}_terraform.tfvars", text: data
	sh "cat ${BUILD_ID}_terraform.tfvars"
      	  }
      }
    }
    stage('Terraform Init') {
      steps {
		dir('aws') {  
			sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
			//sh "terraform init  -input=false -backend-config=\"bucket=jenkins\" -backend-config=\"access_key=${access_key}\" -backend-config=\"secret_key=${secret_key}\" -backend-config=\"region=${aws_region}\" -backend-config=\"key=tf-state/${BUILD_ID}_terraform.tfstate\""
			sh "terraform workspace new ${BUILD_ID}-state"
			sh "terraform workspace select  ${BUILD_ID}-state"
			sh "terraform workspace show"
			sh "terraform state pull"
		  }
       }
    }	
    stage('Terraform Plan') {
      steps {
		dir('aws') {   
				sh "terraform plan -out=tfplan -var-file=${BUILD_ID}_terraform.tfvars"
				sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
		}
      }
    }
   stage('Terraform Apply') {
      steps {
		dir('aws') {   
			sh "terraform apply -input=false -auto-approve tfplan"
			sh "terraform output"
			
			script{
				ami = sh(returnStdout: true, script: 'terraform output -raw ami').trim()
				application_url = sh(returnStdout: true, script: 'terraform output -raw application_url').trim()
				arn = sh(returnStdout: true, script: 'terraform output -raw arn').trim()
				availability_zone = sh(returnStdout: true, script: 'terraform output -raw availability_zone').trim()
				instance_type = sh(returnStdout: true, script: 'terraform output -raw instance_type').trim()
				key_name = sh(returnStdout: true, script: 'terraform output -raw key_name').trim()
				private_dns = sh(returnStdout: true, script: 'terraform output -raw private_dns').trim()
				private_ip = sh(returnStdout: true, script: 'terraform output -raw private_ip').trim()
				public_dns = sh(returnStdout: true, script: 'terraform output -raw public_dns').trim()
				public_ip = sh(returnStdout: true, script: 'terraform output -raw public_ip').trim()
				route_table_id = sh(returnStdout: true, script: 'terraform output -raw route_table_id').trim()
				subnet_id = sh(returnStdout: true, script: 'terraform output -raw subnet_id').trim()
				vpc_id = sh(returnStdout: true, script: 'terraform output -raw vpc_id').trim()
			}
		}
      }
    }
  stage('Send Email') {
      steps {
		script{
			html_body = "Dear User, <br/><br/>" 
			html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
			html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
			html_body = html_body + "<table>"
			html_body = html_body + "<tr><td>Deployment ID:</td><td>${BUILD_ID}</td></tr>"
			html_body = html_body + "<tr><td>AMI ID:</td><td>${ami}</td></tr>"
			html_body = html_body + "<tr><td>Application Url:</td><td>${application_url}</td></tr>"
			html_body = html_body + "<tr><td>Instance arn:</td><td>${arn}</td></tr>"
			html_body = html_body + "<tr><td>Availability Zone</td><td>${availability_zone}</td></tr>"
			html_body = html_body + "<tr><td>Instance Type:</td><td>${instance_type}</td></tr>"
			html_body = html_body + "<tr><td>Key Name:</td><td>${key_name}</td></tr>"
			html_body = html_body + "<tr><td>Private DNS:</td><td>${private_dns}</td></tr>"
			html_body = html_body + "<tr><td>Private IP:</td><td>${private_ip}</td></tr>"
			html_body = html_body + "<tr><td>Public DNS:</td><td>${public_dns}</td></tr>"
			html_body = html_body + "<tr><td>Public IP:</td><td>${public_ip}</td></tr>"
			html_body = html_body + "<tr><td>Route Table ID:</td><td>${route_table_id}</td></tr>"		
			html_body = html_body + "<tr><td>Subnet ID:</td><td>${subnet_id}</td></tr>"		
			html_body = html_body + "<tr><td>VPC ID:</td><td>${vpc_id}</td></tr>"		
			html_body = html_body + "</table>"
			html_body = html_body + "<br/><br/>Thanks, </br>Cloud Deployment Team"
		}
		mail 	to: 'ganesh.pote@ril.com', 
				from: 'jenkins@example.com',
				mimeType: 'text/html',
				subject: "Your deployment request number \"${BUILD_ID}\" Status - Completed", 
				body: html_body
		  }
    }
  stage('Terraform Destroy Approval') {
	   steps {
		   dir('aws') {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
stage('Terraform Destroy') {
      steps {
		dir('aws') {   
			sh "terraform workspace select  ${BUILD_ID}-state"
				sh "terraform destroy -input=false -auto-approve -var-file=${BUILD_ID}_terraform.tfvars"
		}
      }
    }
  }
  post {
        always {
			dir('aws') { 
				archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
				//cleanWs()
			}
        }
    }
}
