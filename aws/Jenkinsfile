pipeline {
  agent any

  parameters {
        string(name: 'app_name', defaultValue: 'test1', description: 'Provide Application name to be deploy') 
		choice(name: 'app_environment', choices: ['dev', 'qa', 'pre-prod', 'prod'], description: 'Specify environment' )
		choice(name: 'aws_region', choices: ['us-east-1', 'us-east-2'], description: 'Specify aws region' )
		choice(name: 'instance_type', choices: ['t2.micro', 't2.medium'], description: 'Specify instance type' )
    }
  stages {
   stage('Preparations') {
      steps {
	sh "cd aws/"
	withCredentials ([usernamePassword(credentialsId: 'aws_credentails', usernameVariable: 'aws_access_key', passwordVariable: 'aws_secret_key')]) {
	   sh 'echo aws_access_key=${aws_access_key} >> terraform.tfvars'
	   sh 'echo aws_secret_key=${aws_secret_key} >> terraform.tfvars'
           sh 'echo app_name=${app_name} >> terraform.tfvars'
	   sh 'echo app_environment=${app_environment} >> terraform.tfvars'
	   sh 'echo aws_region=${aws_region} >> terraform.tfvars'
	   sh 'echo instance_type=${instance_type} >> terraform.tfvars'
	   sh 'cat terraform.tfvars'
	}
      }
    }
    stage('Terraform Init') {
      steps {
        sh "terraform init"
      }
    }
    stage('Terraform Plan') {
      steps {
        sh "terraform plan -out=tfplan -var-file=terraform.tfvars"
        sh "terraform show -no-color tfplan > tfplan.txt"
      }
    }
  }
  post {
        always {
            archiveArtifacts artifacts: 'tfplan.txt'
	    deleteDir() /*clean up our workspace */
        }
    }
}
