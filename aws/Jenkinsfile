def access_key=""
def secret_key=""
pipeline {
  agent any

  parameters {
        string(name: 'app_name', defaultValue: 'test1', description: 'Provide Application name to be deploy') 
		choice(name: 'app_environment', choices: ['dev', 'qa', 'pre-prod', 'prod'], description: 'Specify environment' )
		choice(name: 'aws_region', choices: ['us-east-1', 'us-east-2'], description: 'Specify aws region' )
		choice(name: 'instance_type', choices: ['t2.micro', 't2.medium'], description: 'Specify instance type' )
    }
  stages {
   stage('Preparations') {
      steps {
	script {
		withCredentials ([usernamePassword(credentialsId: 'aws_credentails', usernameVariable: 'aws_access_key', passwordVariable: 'aws_secret_key')]) {
		   access_key = aws_access_key
		   secret_key = aws_secret_key
		}
	}
	dir('aws') {     
	sh "echo aws_access_key=${access_key} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "echo aws_secret_key=${secret_key} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "echo app_name=${app_name} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "echo app_environment=${app_environment} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "echo aws_region=${aws_region} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "echo instance_type=${instance_type} \n >> ${BUILD_ID}_terraform.tfvars"
	sh "cat ${BUILD_ID}_terraform.tfvars"
      	  }
      }
    }
    stage('Terraform Init') {
      steps {
	dir('aws') {   
        	sh "terraform init"
	}
      }
    }
    stage('Terraform Plan') {
      steps {
	dir('aws') {   
        	sh "terraform plan -out=tfplan -var-file=${BUILD_ID}_terraform.tfvars"
        	sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
	}
      }
    }
  }
  post {
        always {
		dir('aws') { 
            archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
		}
        }
    }
}
