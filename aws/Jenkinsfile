def access_key=""
def secret_key=""
def data = ""
pipeline {
  agent any

  parameters {
        string(name: 'app_name', defaultValue: 'test1', description: 'Provide Application name to be deploy') 
		choice(name: 'app_environment', choices: ['dev', 'qa', 'pre-prod', 'prod'], description: 'Specify environment' )
		choice(name: 'aws_region', choices: ['us-east-1', 'us-east-2'], description: 'Specify aws region' )
		choice(name: 'instance_type', choices: ['t2.micro', 't2.medium'], description: 'Specify instance type' )
    }
  stages {
   stage('Preparations') {
      steps {
	script {
		withCredentials ([usernamePassword(credentialsId: 'aws_credentails', usernameVariable: 'aws_access_key', passwordVariable: 'aws_secret_key')]) {
		   access_key = aws_access_key
		   secret_key = aws_secret_key
		}
	}
	dir('aws') {
		script {
			data = "aws_access_key=\"${access_key}\"\n"
			data = data + "aws_secret_key=\"${secret_key}\"\n"
			data = data + "app_name=\"${app_name}\"\n"
			data = data + "app_environment=\"${app_environment}\"\n"
			data = data + "aws_region=\"${aws_region}\"\n"
			data = data + "instance_type=\"${instance_type}\"\n"
		}
	writeFile file: "${BUILD_ID}_terraform.tfvars", text: data
	sh "cat ${BUILD_ID}_terraform.tfvars"
      	  }
      }
    }
    stage('Terraform Init') {
      steps {
	dir('aws') {  
		sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
		//sh "terraform init  -input=false -backend-config=\"bucket=jenkins\" -backend-config=\"access_key=${access_key}\" -backend-config=\"secret_key=${secret_key}\" -backend-config=\"region=${aws_region}\" -backend-config=\"key=tf-state/${BUILD_ID}_terraform.tfstate\""
		sh "terraform workspace new ${BUILD_ID}-state"
		sh "terraform workspace select  ${BUILD_ID}-state"
		sh "terraform workspace show"
		sh "terraform state pull"
	  }
       }
    }
    stage('Terraform Plan') {
      steps {
	dir('aws') {   
        	sh "terraform plan -out=tfplan -var-file=${BUILD_ID}_terraform.tfvars"
        	sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
	}
      }
    }
   stage('Terraform Apply') {
      steps {
	dir('aws') {   
        	sh "terraform apply -input=false -auto-approve tfplan"
		sh "terraform output"
	}
      }
    }
  stage('Send Email') {
      steps {
	script{
	    html_body = "Dear User, <br/><br/>" 
	    html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
	    html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
	    html_body = html_body + "<table><tr>"
	    html_body = html_body + "<td>Deployment Ref ID:</td><td>terraform output -raw ami</td>"
	    html_body = html_body + "<td>ami:</td><td>${BUILD_ID}</td>"
	    html_body = html_body + "<td>Application Url:</td><td>terraform output -raw application_url</td>"
	    html_body = html_body + "<td>Instance arn:</td><td>terraform output -raw arn</td>"
	    html_body = html_body + "<td>Availability Zone</td><td>terraform output -raw arn</td>"
	    html_body = html_body + "<td>Instance Type:</td><td>terraform output -raw instance_type</td>"
            html_body = html_body + "<td>Key Name:</td><td>terraform output -raw key_name</td>"
	    html_body = html_body + "<td>Private DNS:</td><td>terraform output -raw private_dns</td>"
	    html_body = html_body + "<td>Private IP:</td><td>terraform output -raw private_ip</td>"
            html_body = html_body + "<td>Public DNS:</td><td>terraform output -raw public_dns</td>"
	    html_body = html_body + "<td>Public IP:</td><td>terraform output -raw public_id</td>"
	    html_body = html_body + "<td>Route Table ID:</td><td>terraform output -raw route_table_id</td>"		
	    html_body = html_body + "<td>Subnet ID:</td><td>terraform output -raw subnet_id</td>"		
	    html_body = html_body + "<td>VPC ID:</td><td>terraform output -raw vpc_id</td>"		
	    html_body = html_body + "</table></tr>"
	    html_body = html_body + "<br/><br/>Thanks, </br>Deployment Team"
	}
	mail 	to: 'ganesh.pote@ril.com', 
		from: 'jenkins@example.com',
	    	mimeType: 'text/html',
	    	subject: "Example Build: ${env.JOB_NAME} - Failed", 
	    	body: html_body
      }
    }
  stage('Terraform Destroy Approval') {
	   steps {
		   dir('aws') {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
stage('Terraform Destroy') {
      steps {
	dir('aws') {   
		sh "terraform workspace select  ${BUILD_ID}-state"
        	sh "terraform destroy -input=false -auto-approve -var-file=${BUILD_ID}_terraform.tfvars"
	}
      }
    }
  }
  post {
        always {
		dir('aws') { 
            archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
			//cleanWs()
		}
        }
    }
}
