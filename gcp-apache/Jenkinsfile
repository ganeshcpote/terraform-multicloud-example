def access_key=""
def secret_key=""
def data = ""
def gcp_auth_file = "/tmp/ganesh/cred.json"
pipeline {
  agent any

  parameters {
        string(name: 'app_name', defaultValue: 'test1', description: 'Provide Application name to be deploy') 
		choice(name: 'app_environment', choices: ['dev', 'qa', 'pre-prod', 'prod'], description: 'Specify environment' )
		choice(name: 'gcp_project', choices: ['sagar-trial-account'], description: 'Specify gcp project' )
		choice(name: 'gcp_region', choices: ['europe-west1'], description: 'Specify gcp region' )
		choice(name: 'machine_type', choices: ['f1-micro'], description: 'Specify instance type' )
		string(name: 'user_email', defaultValue: 'ganesh.pote@hotmail.com', description: 'Provide user email Id for notification') 
    }
  stages {
   stage('Preparations') {
      steps {
		script {
			withCredentials ([usernamePassword(credentialsId: 'aws_credentails', usernameVariable: 'aws_access_key', passwordVariable: 'aws_secret_key')]) {
			access_key = aws_access_key
			secret_key = aws_secret_key
			}
		}
		dir('gcp-apache') {
			script {
				data = "gcp_project=\"${gcp_project}\"\n"
				data = data + "gcp_auth_file=\"${gcp_auth_file}\"\n"
				data = data + "app_name=\"${app_name}\"\n"
				data = data + "app_environment=\"${app_environment}\"\n"
				data = data + "gcp_region=\"${gcp_region}\"\n"
				data = data + "machine_type=\"${machine_type}\"\n"
			}
		writeFile file: "${BUILD_ID}_terraform.tfvars", text: data
		sh "cat ${BUILD_ID}_terraform.tfvars"
			}
		}
    }
    stage('Terraform Init') {
      steps {
		dir('gcp-apache') {  
			sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
			//sh "terraform init  -input=false -backend-config=\"bucket=jenkins\" -backend-config=\"access_key=${access_key}\" -backend-config=\"secret_key=${secret_key}\" -backend-config=\"region=${aws_region}\" -backend-config=\"key=tf-state/${BUILD_ID}_terraform.tfstate\""
			sh "terraform workspace new gcp_${BUILD_ID}_state"
			sh "terraform workspace select  gcp_${BUILD_ID}_state"
			sh "terraform workspace show"
			sh "terraform state pull"
		}
	  }
    }
    stage('Terraform Plan') {
      steps {
		dir('gcp-apache') {   
				sh "terraform plan -out=tfplan -var-file=${BUILD_ID}_terraform.tfvars"
				sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
		}
      }
    }
   stage('Terraform Apply') {
      steps {
		dir('gcp-apache') {   
			sh "terraform apply -input=false -auto-approve tfplan"
			sh "terraform output"

			script{
				gcp_web_ip = sh(returnStdout: true, script: 'terraform output -raw gcp-web-ip').trim()
				instance_id = sh(returnStdout: true, script: 'terraform output -raw instance_id').trim()
				machine_type = sh(returnStdout: true, script: 'terraform output -raw machine_type').trim()
				instance_name = sh(returnStdout: true, script: 'terraform output -raw instance_name').trim()
				cpu_platform = sh(returnStdout: true, script: 'terraform output -raw cpu_platform').trim()
				zone = sh(returnStdout: true, script: 'terraform output -raw zone').trim()
				vpc_id = sh(returnStdout: true, script: 'terraform output -raw vpc_id').trim()
				vpc_name = sh(returnStdout: true, script: 'terraform output -raw vpc_name').trim()
				subnet_id = sh(returnStdout: true, script: 'terraform output -raw subnet_id').trim()
				subnet_name = sh(returnStdout: true, script: 'terraform output -raw subnet_name').trim()
				project_name = sh(returnStdout: true, script: 'terraform output -raw project_name').trim()
				external_ip = sh(returnStdout: true, script: 'terraform output -raw external-ip').trim()
				application_url = sh(returnStdout: true, script: 'terraform output -raw application_url').trim()
			}
		}
      }
    }
  stage('Send Email') {
      steps {
		script{
			html_body = "Dear User, <br/><br/>" 
			html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
			html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
			html_body = html_body + "<table>"
			html_body = html_body + "<tr><td>Deployment ID:</td><td>${BUILD_ID}</td></tr>"
			html_body = html_body + "<tr><td>Cloud Provider:</td><td>GCP</td></tr>"
			html_body = html_body + "<tr><td>GCP Web IP:</td><td>${gcp_web_ip}</td></tr>"
			html_body = html_body + "<tr><td>Application Url:</td><td>${application_url}</td></tr>"
			html_body = html_body + "<tr><td>Instance ID:</td><td>${instance_id}</td></tr>"
			html_body = html_body + "<tr><td>Machine Type :</td><td>${machine_type}</td></tr>"
			html_body = html_body + "<tr><td>Instance Name:</td><td>${instance_name}</td></tr>"
			html_body = html_body + "<tr><td>CPU Platform:</td><td>${cpu_platform}</td></tr>"
			html_body = html_body + "<tr><td>Zone:</td><td>${zone}</td></tr>"		
			html_body = html_body + "<tr><td>VPC ID:</td><td>${vpc_id}</td></tr>"		
			html_body = html_body + "<tr><td>VPC Name:</td><td>${vpc_name}</td></tr>"
			html_body = html_body + "<tr><td>Subnet Id:</td><td>${subnet_id}</td></tr>"		
			html_body = html_body + "<tr><td>Subnet Name:</td><td>${subnet_name}</td></tr>"		
			html_body = html_body + "<tr><td>Project Name:</td><td>${project_name}</td></tr>"	
			html_body = html_body + "<tr><td>External IP Address:</td><td>${external_ip}</td></tr>"
			html_body = html_body + "</table>"
			html_body = html_body + "<br/><br/>Thanks, </br>Cloud Deployment Team"
		}
			mail	to: "${user_email}", 
			from: 'jenkins@example.com',
			mimeType: 'text/html',
			subject: "Your GCP Cloud deployment request number \"${BUILD_ID}\" Status - Completed", 
			body: html_body
		  }
  }
  stage('Terraform Destroy Approval') {
	   steps {
		   dir('gcp-apache') {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
stage('Terraform Destroy') {
      steps {
		dir('gcp-apache') {   
			sh "terraform workspace select  gcp_${BUILD_ID}_state"
				sh "terraform destroy -input=false -auto-approve -var-file=${BUILD_ID}_terraform.tfvars"
		}
      }
    }
  }
  post {
        always {
			dir('gcp-apache') { 
				archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
				//cleanWs()
			}
        }
    }
}
